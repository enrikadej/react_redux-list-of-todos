{"version":3,"sources":["store/actions.ts","store/index.ts","api.ts","store/selectors.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["ActionType","setTodosActions","payload","type","SET_TODOS","setUserActions","SET_USER","initialState","todos","user","store","createStore","state","action","ADD_TODO","url","requestTodos","a","fetch","response","json","todo","requestUserById","userId","deleteTodo","todoId","method","deletedTodo","getTodosSelector","getUserSelector","TodoList","useState","searchText","setSearchText","category","setCategory","dispatch","useDispatch","useSelector","useEffect","loadTodosFromServer","todosFromServer","todosToFilter","group","groupOfTodos","filter","completed","todosToShow","title","includes","getUser","id","serverUser","className","placeholder","value","onChange","event","target","onClick","map","sort","Math","random","b","classNames","checked","readOnly","then","CurrentUser","name","email","phone","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e790ec51.chunk.js","sourcesContent":["import { Todo, User } from '../react-app-env';\n\nexport enum ActionType {\n  SET_TODOS = 'SET_TODOS',\n  ADD_TODO = 'ADD_TODO',\n  SET_USER = 'SET_USER',\n}\n\nexport type Action = SetTodosAction\n| AddTodoAction\n| SetUserAction;\n\nexport interface SetTodosAction {\n  type: ActionType.SET_TODOS,\n  payload: Todo[],\n}\n\nexport interface AddTodoAction {\n  type: ActionType.ADD_TODO,\n  payload: Todo,\n}\n\nexport interface SetUserAction {\n  type: ActionType.SET_USER,\n  payload: User | null,\n}\n\nexport const setTodosActions = (payload: Todo[]): Action => ({\n  type: ActionType.SET_TODOS,\n  payload,\n});\n\nexport const addTodoActions = (payload: Todo): Action => ({\n  type: ActionType.ADD_TODO,\n  payload,\n});\n\nexport const setUserActions = (payload: User | null): Action => ({\n  type: ActionType.SET_USER,\n  payload,\n});\n","import { createStore } from 'redux';\nimport { State } from '../react-app-env';\nimport { Action, ActionType } from './actions';\n\nexport const initialState: State = {\n  todos: [],\n  user: null,\n};\n\nconst reducer = (state: State = initialState, action: Action) => {\n  switch (action.type) {\n    case ActionType.SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case ActionType.ADD_TODO:\n      return {\n        ...state,\n        todos: [...state.todos, action.payload],\n      };\n\n    case ActionType.SET_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","import { Todo, User } from './react-app-env';\n\nconst url = 'https://mate.academy/students-api';\n\nexport const requestTodos = async (): Promise<Todo[]> => {\n  const response = await fetch(`${url}/todos`);\n  const todo = await response.json();\n\n  return todo;\n};\n\nexport const requestUserById = async (userId: number): Promise<User> => {\n  const response = await fetch(`${url}/users/${userId}`);\n  const user = await response.json();\n\n  return user;\n};\n\nexport const deleteTodo = async (todoId: number) => {\n  const response = await fetch(`${url}/todos/${todoId}`, { method: 'DELETE' });\n  const deletedTodo = await response.json();\n\n  return deletedTodo;\n};\n","import { State } from '../react-app-env';\n\nexport const getTodosSelector = (state: State) => state.todos;\n\nexport const getUserSelector = (state: State) => state.user;\n","import './TodoList.scss';\nimport classNames from 'classnames';\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { deleteTodo, requestTodos, requestUserById } from '../../api';\nimport { Todo } from '../../react-app-env';\n\nimport { getTodosSelector } from '../../store/selectors';\nimport { setTodosActions, setUserActions } from '../../store/actions';\n\nexport const TodoList: React.FC = () => {\n  const [searchText, setSearchText] = useState('');\n  const [category, setCategory] = useState('all');\n\n  const dispatch = useDispatch();\n  const todos = useSelector(getTodosSelector);\n\n  // #region todos\n  useEffect(() => {\n    const loadTodosFromServer = async () => {\n      const todosFromServer = await requestTodos();\n\n      dispatch(setTodosActions(todosFromServer));\n    };\n\n    loadTodosFromServer();\n  }, []);\n\n  const categoryOfTodos = (todosToFilter: Todo[], group: string) => {\n    if (group === 'completed') {\n      return todosToFilter.filter(todo => todo.completed);\n    }\n\n    if (group === 'active') {\n      return todosToFilter.filter(todo => !todo.completed);\n    }\n\n    return todosToFilter;\n  };\n\n  const filterTodos = (group2: Todo[]) => {\n    return group2.filter(todo => todo.title.includes(searchText));\n  };\n\n  const groupOfTodos = categoryOfTodos(todos, category);\n\n  const todosToShow = filterTodos(groupOfTodos);\n\n  const shuffleArray = (todosToShuffle: Todo[]) => {\n    return todosToShuffle\n      .map(todo => ({ todo, sort: Math.random() }))\n      .sort((a, b) => a.sort - b.sort)\n      .map(({ todo }) => todo);\n  };\n\n  const deletingTodo = (id: number) => {\n    deleteTodo(id)\n      .then(() => requestTodos());\n  };\n  // #endregion\n\n  // #region User\n  const getUser = async (id: number) => {\n    const serverUser = await requestUserById(id);\n\n    dispatch(setUserActions(serverUser));\n  };\n  // #endregion\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <input\n          type=\"text\"\n          placeholder=\"filter todos\"\n          value={searchText}\n          onChange={(event) => {\n            setSearchText(event.target.value);\n          }}\n          data-cy=\"filterByTitle\"\n        />\n\n        <select\n          value={category}\n          onChange={(event) => {\n            setCategory(event.target.value);\n          }}\n        >\n          <option value=\"all\">\n            All\n          </option>\n\n          <option value=\"active\">\n            Active\n          </option>\n\n          <option value=\"completed\">\n            Completed\n          </option>\n        </select>\n\n        <button\n          type=\"button\"\n          onClick={() => {\n            dispatch(setTodosActions(shuffleArray([...todos])));\n          }}\n        >\n          Random\n        </button>\n\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {todosToShow.map(todo => {\n            return (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--unchecked': !todo.completed,\n                    'TodoList__item--checked': todo.completed,\n                  },\n                )}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <div className=\"buttons\">\n                  <button\n                    type=\"button\"\n                    onClick={() => {\n                      getUser(todo.userId);\n                    }}\n                    className=\"button\n                      TodoList__user-button\n                      TodoList__user-button--selected\"\n                    data-cy=\"userButton\"\n                  >\n                    User&nbsp;#\n                    {todo.userId}\n                  </button>\n\n                  <button\n                    type=\"button\"\n                    onClick={() => {\n                      deletingTodo(todo.id);\n                    }}\n                    className=\"button\n                      TodoList__user-button\n                      TodoList__delete-button--selected\"\n                  >\n                    Delete\n                  </button>\n                </div>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import './CurrentUser.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserSelector } from '../../store/selectors';\nimport { setUserActions } from '../../store/actions';\n\nexport const CurrentUser = () => {\n  const user = useSelector(getUserSelector);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"CurrentUser\">\n      {user\n        ? (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:\n                { user.id }\n              </span>\n            </h2>\n            <h3\n              className=\"CurrentUser__name\"\n              data-cy=\"userName\"\n            >\n              {user.name}\n            </h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                dispatch(setUserActions(null));\n              }}\n            >\n              Clear\n            </button>\n          </>\n\n        )\n        : 'User is not found'}\n\n    </div>\n  );\n};\n","import './App.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          <CurrentUser />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { store } from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}