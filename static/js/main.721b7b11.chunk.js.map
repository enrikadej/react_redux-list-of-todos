{"version":3,"sources":["store/actions.ts","store/index.ts","api.ts","store/selectors.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["ActionType","setTodosActions","payload","type","SET_TODOS","setUserActions","SET_USER","initialState","todos","user","store","createStore","state","action","ADD_TODO","url","requestTodos","a","fetch","response","json","requestUserById","userId","console","log","deleteTodo","todoId","method","getTodosSelector","getUserSelector","TodoList","useState","visibleText","setVisibleText","searchText","setSearchText","category","setCategory","dispatch","useDispatch","useSelector","useEffect","loadTodosFromServer","todosFromServer","todosToFilter","group","groupOfTodos","filter","todo","completed","searchQuery","useCallback","debounce","todosToShow","useMemo","title","includes","deletingTodo","id","newTodos","getUser","className","placeholder","value","onChange","event","target","onClick","map","sort","Math","random","b","classNames","checked","readOnly","CurrentUser","name","email","phone","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.721b7b11.chunk.js","sourcesContent":["import { Todo, User } from '../react-app-env';\n\nexport enum ActionType {\n  SET_TODOS = 'SET_TODOS',\n  ADD_TODO = 'ADD_TODO',\n  SET_USER = 'SET_USER',\n}\n\nexport type Action = SetTodosAction\n| AddTodoAction\n| SetUserAction;\n\nexport interface SetTodosAction {\n  type: ActionType.SET_TODOS,\n  payload: Todo[],\n}\n\nexport interface AddTodoAction {\n  type: ActionType.ADD_TODO,\n  payload: Todo,\n}\n\nexport interface SetUserAction {\n  type: ActionType.SET_USER,\n  payload: User | null,\n}\n\nexport const setTodosActions = (payload: Todo[]): Action => ({\n  type: ActionType.SET_TODOS,\n  payload,\n});\n\nexport const addTodoActions = (payload: Todo): Action => ({\n  type: ActionType.ADD_TODO,\n  payload,\n});\n\nexport const setUserActions = (payload: User | null): Action => ({\n  type: ActionType.SET_USER,\n  payload,\n});\n","import { createStore } from 'redux';\nimport { State } from '../react-app-env';\nimport { Action, ActionType } from './actions';\n\nexport const initialState: State = {\n  todos: [],\n  user: null,\n};\n\nconst reducer = (state: State = initialState, action: Action) => {\n  switch (action.type) {\n    case ActionType.SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case ActionType.ADD_TODO:\n      return {\n        ...state,\n        todos: [...state.todos, action.payload],\n      };\n\n    case ActionType.SET_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","import { Todo, User } from './react-app-env';\n\nconst url = 'https://mate.academy/students-api';\n\nexport const requestTodos = async (): Promise<Todo[]> => {\n  const response = await fetch(`${url}/todos`);\n  const todos = await response.json();\n\n  return todos;\n};\n\nexport const requestUserById = async (userId: number): Promise<User | null> => {\n  try {\n    const response = await fetch(`${url}/users/${userId}`);\n    const user = await response.json();\n\n    return user;\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.log(error);\n  }\n\n  return null;\n};\n\nexport const deleteTodo = async (todoId: number) => {\n  return fetch(`${url}/todos/${todoId}`, { method: 'DELETE' });\n};\n","import { State } from '../react-app-env';\n\nexport const getTodosSelector = (state: State) => state.todos;\n\nexport const getUserSelector = (state: State) => state.user;\n","import './TodoList.scss';\nimport classNames from 'classnames';\n\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { debounce } from 'lodash';\nimport { deleteTodo, requestTodos, requestUserById } from '../../api';\nimport { Todo } from '../../react-app-env';\n\nimport { getTodosSelector } from '../../store/selectors';\n\nimport {\n  setTodosActions,\n  setUserActions,\n} from '../../store/actions';\n\nconst shuffleArray = (todosToShuffle: Todo[]) => {\n  return todosToShuffle\n    .map(todo => ({ todo, sort: Math.random() }))\n    .sort((a, b) => a.sort - b.sort)\n    .map(({ todo }) => todo);\n};\n\nconst categoryOfTodos = (todosToFilter: Todo[], group: string) => {\n  if (group === 'completed') {\n    return todosToFilter.filter(todo => todo.completed);\n  }\n\n  if (group === 'active') {\n    return todosToFilter.filter(todo => !todo.completed);\n  }\n\n  return todosToFilter;\n};\n\nexport const TodoList: React.FC = () => {\n  const [visibleText, setVisibleText] = useState('');\n  const [searchText, setSearchText] = useState('');\n  const [category, setCategory] = useState('all');\n\n  const dispatch = useDispatch();\n  const todos = useSelector(getTodosSelector);\n\n  // eslint-disable-next-line no-console\n  console.log('render TodoList');\n\n  // #region todos\n  useEffect(() => {\n    const loadTodosFromServer = async () => {\n      const todosFromServer = await requestTodos();\n\n      dispatch(setTodosActions(todosFromServer));\n    };\n\n    loadTodosFromServer();\n  }, []);\n\n  const groupOfTodos = categoryOfTodos(todos, category);\n  const searchQuery = useCallback(debounce(setSearchText, 1000), []);\n\n  const todosToShow = useMemo(() => {\n    // eslint-disable-next-line no-console\n    console.log('filtering todos', searchText);\n\n    return groupOfTodos.filter(todo => todo.title.includes(searchText));\n  }, [groupOfTodos, searchText]);\n\n  const deletingTodo = async (todo: Todo) => {\n    await deleteTodo(todo.id);\n    const newTodos = await requestTodos();\n\n    dispatch(setTodosActions(newTodos));\n  };\n  // #endregion\n\n  // #region User\n  const getUser = async (id: number) => {\n    const user = await requestUserById(id);\n\n    dispatch(setUserActions(user));\n  };\n  // #endregion\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <input\n          type=\"text\"\n          placeholder=\"filter todos\"\n          value={visibleText}\n          onChange={(event) => {\n            searchQuery(event.target.value);\n            setVisibleText(event.target.value);\n          }}\n          data-cy=\"filterByTitle\"\n        />\n\n        <select\n          value={category}\n          onChange={(event) => {\n            setCategory(event.target.value);\n          }}\n        >\n          <option value=\"all\">\n            All\n          </option>\n\n          <option value=\"active\">\n            Active\n          </option>\n\n          <option value=\"completed\">\n            Completed\n          </option>\n        </select>\n\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            dispatch(setTodosActions(shuffleArray([...todos])));\n          }}\n        >\n          Random\n        </button>\n\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {todosToShow.map(todo => {\n            return (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--unchecked': !todo.completed,\n                    'TodoList__item--checked': todo.completed,\n                  },\n                )}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <div className=\"buttons\">\n                  <button\n                    type=\"button\"\n                    onClick={() => {\n                      getUser(todo.userId);\n                    }}\n                    className=\"button\n                      TodoList__user-button\n                      TodoList__user-button--selected\"\n                    data-cy=\"userButton\"\n                  >\n                    User&nbsp;#\n                    {todo.userId}\n                  </button>\n\n                  <button\n                    type=\"button\"\n                    onClick={() => {\n                      deletingTodo(todo);\n                    }}\n                    className=\"button\n                      TodoList__user-button\n                      TodoList__delete-button--selected\"\n                  >\n                    Delete\n                  </button>\n                </div>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import './CurrentUser.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserSelector } from '../../store/selectors';\nimport { setUserActions } from '../../store/actions';\n\nexport const CurrentUser = () => {\n  const user = useSelector(getUserSelector);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"CurrentUser\">\n      {user\n        ? (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:\n                { user.id }\n              </span>\n            </h2>\n            <h3\n              className=\"CurrentUser__name\"\n              data-cy=\"userName\"\n            >\n              {user.name}\n            </h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                dispatch(setUserActions(null));\n              }}\n            >\n              Clear\n            </button>\n          </>\n\n        )\n        : 'User is not found'}\n\n    </div>\n  );\n};\n","import './App.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          <CurrentUser />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { store } from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}